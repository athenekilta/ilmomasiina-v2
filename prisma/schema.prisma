// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// #############################################################################
// DATA SCHEMAS
// #############################################################################

// An example data schema
model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// #############################################################################
// NEXT AUTH SCHEMAS
// #############################################################################

// When extending user data, extend this model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(user)
  accounts      Account[]
  sessions      Session[]
}

enum UserRole {
  user
  admin
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  expiresAt DateTime
  email     String
}

model PasswordChangeToken {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  expiresAt DateTime
  email     String
}

enum RaffleStatus {
  NOT_STARTED
  REGISTRATION_OPEN
  SIMULATING
  COMPLETED
}

model Event {
  id                    Int        @id @default(autoincrement())
  title                 String
  date                  DateTime
  registrationStartDate DateTime
  registrationEndDate   DateTime
  openQuotaSize         Int        @default(0) // Assuming validation is handled at application level
  description           String?
  price                 String?
  location              String?
  webpageUrl            String?
  draft                 Boolean    @default(true)
  signupsPublic         Boolean    @default(false)
  verificationEmail     String?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  deletedAt             DateTime?  @map("deletedAt") // Paranoid deletion setup
  raffleEnabled         Boolean    @default(false)
  raffleStartTime       DateTime?
  raffleEndTime         DateTime?
  raffleStatus          RaffleStatus @default(NOT_STARTED)
  Questions             Question[]
  Quotas                Quota[]
  raffleSimulations RaffleSimulation[]
}

enum QuestionType {
  text
  textarea
  radio
  checkbox
}

model Question {
  id       String       @id @default(cuid())
  question String
  type     QuestionType @default(text) // MULTIPLE_CHOICE | TEXT
  sortId   Int
  options  String[]     @default([])
  required Boolean      @default(true)
  public   Boolean      @default(false)
  eventId  Int
  Event    Event        @relation(fields: [eventId], references: [id])
  Answers  Answer[]

  @@index([eventId])
}

model Answer {
  id         String   @id @default(cuid())
  answer     String
  questionId String
  signupId   String
  Question   Question @relation(fields: [questionId], references: [id])
  Signup     Signup   @relation(fields: [signupId], references: [id])

  @@unique([signupId, questionId], name: "signup_and_question")
}

model Signup {
  id                 String       @id @default(cuid())
  name               String
  email              String
  completedAt        DateTime?
  createdAt          DateTime     @default(now())
  quotaId            String
  registrationIntent DateTime?
  status             SignupStatus @default(PENDING)
  Quota              Quota        @relation(fields: [quotaId], references: [id])
  Answers            Answer[]

  @@index([quotaId])
}

enum SignupStatus {
  PENDING
  CONFIRMED
  REJECTED
}

model RaffleSimulation {
  id          String   @id @default(cuid())
  eventId     Int
  seed        String
  startTime   DateTime
  endTime     DateTime
  physicsState Json    // Stores initial positions and final order
  event       Event    @relation(fields: [eventId], references: [id])
  createdAt   DateTime @default(now())
}


model Quota {
  id      String   @id @default(cuid())
  title   String
  size    Int?
  sortId  Int
  eventId Int
  Event   Event    @relation(fields: [eventId], references: [id])
  Signups Signup[]

  @@index([eventId])
}
